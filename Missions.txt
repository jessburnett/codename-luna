<!-- YOUR MISSION A:
				Run these pages with your favorite web server.
				
				Tip: call up the page using localhost as the domain (this will allow the Gigya API key to work properly):
				http://localhost/.../a.html
				
				1) Add the Gigya login component showLoginUI within a container 						--> ok
				2) After authentication, redirect to b.html												--> ok
				3) Bonus points: from the authentication response, if email is not						--> ok	
				   present in the User object, prompt the user to enter an email, then
				   redirect to b.html (no need to persist email, just ask for it)
				   (hint: you will need to use addEventHandlers for the onLogin event)
				4) Bonus-bonus points: show some kind of counter or flag indicating how					--> ok
				   many times the user has logged in (e.g., use a cookie or database).
				   (You can use whatever server-side or client-side implementation you want)
			-->
			
			
			
<!-- YOUR MISSION B:
				1) Add the Gigya connect component, showAddConnectionsUI, in a containing div			--> ok
				2) From the events generated by the connection component, indicate the connected		--> ok
				   social network providers on the page (hint: you will need to use addEventHandlers)
				3) Modify the logout (below) to use the Gigya logout API call							--> ok
				4) Bonus points: add a sharing experience, either via publishUserAction or showShareUI	--> ok
				
				(Note: while implementation is important, layout and user experience also matters.)
			-->
			
			

Additional:
-----------
- General: 
	- Separate html from JS --> ok
- A1: 
	- Separate html hosting in a different controller file than server.js
- A3:
	- Choose a better prompt mechanism
	- Improve prompt style
	- validate prompt email
- A4:
	- Implement an endpoint to listen the put of the login counter
